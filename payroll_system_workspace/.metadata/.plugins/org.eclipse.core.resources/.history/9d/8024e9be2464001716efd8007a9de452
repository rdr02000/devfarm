
public class MUM {
	public static int hasSingleMaximum(int[] arr) {
		int max = (arr.length == 0)? 0 : arr[0];
		int found = 1;
		
		for (int i = 1; i < arr.length; i++) {
			if (arr[i] > max) {
				max = arr[i];
				found = 1; 
			} else if (max == arr[i]) {
				found += 1;
			}
		}
		
		return (found != 1 || arr.length == 0)? 0 : 1;
	}
	
	
	public static int isPrimeHappy(int n) {
		int sumPrime = 0;
		
		for (int i = 1; i < n-1; i++) {
			if (isPrime(i)) {
				sumPrime += i;
			}
		}
		
		return (sumPrime % n == 0) ? 1 : 0;
	}
	
	private static boolean isPrime(int n) {
		if (n == 2) {
            return true;
		}
		if (n % 2 == 0) return false;
	
		for (int i = 3 ; i*i <= n; i += 2 ) {
			if (n % i == 0) {
				return false;
			}  
		}
		
		return true;
	}
	
	public static void main(String[] args) {
		/*System.out.println(MUM.hasSingleMaximum(new int[]{1, 2, 3, 1, 0}));
		System.out.println(MUM.hasSingleMaximum(new int[]{18}));
		System.out.println(MUM.hasSingleMaximum(new int[]{1, 2, 3, 0, 1, 3}));
		System.out.println(MUM.hasSingleMaximum(new int[]{13, 1, 13, 2, 13, 0, 13, 1, 13}));
		System.out.println(MUM.hasSingleMaximum(new int[]{}));
		System.out.println(MUM.hasSingleMaximum(new int[]{-6, -6, -6, -6, -6, -6, -6}));*/
		
		System.out.println(MUM.isPrimeHappy(5));
		System.out.println(MUM.isPrimeHappy(25));
		System.out.println(MUM.isPrimeHappy(32));
		System.out.println(MUM.isPrimeHappy(8));
		System.out.println(MUM.isPrimeHappy(2));
	}
}
